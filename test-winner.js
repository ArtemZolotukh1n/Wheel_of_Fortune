// –ü—Ä–æ—Å—Ç–æ–π Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

// –î—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ useWheel
function determineWinner(finalRotation, participants) {
  if (participants.length === 0) return null;

  const sliceAngle = 360 / participants.length;
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-360
  const normalizedRotation = ((finalRotation % 360) + 360) % 360;

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∞ (—É–≥–æ–ª 0¬∞)
  // –ö–æ–ª–µ—Å–æ –≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤ canvas)
  // –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
  const winningSectorIndex =
    Math.floor(normalizedRotation / sliceAngle) % participants.length;

  return participants[winningSectorIndex] || null;
}

// –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createParticipants(count) {
  return Array.from({ length: count }, (_, index) => ({
    id: `participant-${index}`,
    name: `–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}`,
    addedAt: new Date(),
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
function testDistribution(participantCount, testName) {
  console.log(`\nüéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è ${testName}`);

  const participants = createParticipants(participantCount);
  const iterations = 100000;
  const winCounts = new Map();

  console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participants.map((p) => p.name).join(', ')}`);
  console.log(`üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${iterations}`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
  participants.forEach((participant) => {
    winCounts.set(participant.id, 0);
  });

  console.log('‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...');

  // –ü—Ä–æ–≤–æ–¥–∏–º 100000 —Ç–µ—Å—Ç–æ–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
  for (let i = 0; i < iterations; i++) {
    const randomRotation = Math.random() * 360 * 10; // –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç 0 –¥–æ 3600¬∞
    const winner = determineWinner(randomRotation, participants);

    console.log(
      `–ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}: —É–≥–æ–ª=${randomRotation.toFixed(1)}¬∞, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å=${winner?.name || 'null'}`,
    );

    if (winner) {
      const currentCount = winCounts.get(winner.id) || 0;
      winCounts.set(winner.id, currentCount + 1);
    }
  }

  console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const expectedWinRate = 1 / participantCount;
  const tolerance = 0.2; // 20% –¥–æ–ø—É—Å–∫ –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π

  let allTestsPassed = true;

  participants.forEach((participant) => {
    const winCount = winCounts.get(participant.id) || 0;
    const actualWinRate = winCount / iterations;
    const deviation = Math.abs(actualWinRate - expectedWinRate);

    if (deviation >= tolerance) {
      console.log(
        `‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ –¥–ª—è ${participant.name}: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ${(deviation * 100).toFixed(2)}% –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å–∫ ${tolerance * 100}%`,
      );
      allTestsPassed = false;
    } else {
      console.log(
        `‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ –¥–ª—è ${participant.name}: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ${(deviation * 100).toFixed(2)}%`,
      );
    }

    if (winCount === 0) {
      console.log(`‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ –¥–ª—è ${participant.name}: 0 –ø–æ–±–µ–¥`);
      allTestsPassed = false;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
  const totalWins = Array.from(winCounts.values()).reduce(
    (sum, count) => sum + count,
    0,
  );
  if (totalWins !== iterations) {
    console.log(
      `‚ùå –û–®–ò–ë–ö–ê: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ ${totalWins} –Ω–µ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Ç–µ—Ä–∞—Ü–∏–π ${iterations}`,
    );
    allTestsPassed = false;
  } else {
    console.log(`‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${totalWins}`);
  }

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${testName}:`);
  participants.forEach((participant) => {
    const winCount = winCounts.get(participant.id) || 0;
    const winRate = ((winCount / iterations) * 100).toFixed(2);
    const expectedRate = ((1 / participantCount) * 100).toFixed(2);
    console.log(
      `${participant.name}: ${winCount} –ø–æ–±–µ–¥ (${winRate}%, –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedRate}%)`,
    );
  });

  return allTestsPassed;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n');

  const testCases = [
    { participantCount: 4, testName: '4 —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
    { participantCount: 6, testName: '6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
    { participantCount: 8, testName: '8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
  ];

  let allTestsPassed = true;

  testCases.forEach(({ participantCount, testName }) => {
    const testPassed = testDistribution(participantCount, testName);
    if (!testPassed) {
      allTestsPassed = false;
    }
  });

  console.log('\n' + '='.repeat(50));
  if (allTestsPassed) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  } else {
    console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò');
    console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
  }
  console.log('='.repeat(50));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();
